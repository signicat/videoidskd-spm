// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VideoIDSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import CommonCrypto
import CoreMedia
import CoreNFC
import CryptoKit
import CryptoTokenKit
import DeviceCheck
import Foundation
import ImageIO
import Lottie
import Network
import OpenSSL
import Security
import Swift
import UIKit.UIImage
import UIKit
@_exported import VideoIDSDK
import VideoToolbox
import WebRTC
import _Concurrency
import _StringProcessing
import os
import zlib
@available(iOS 13, *)
public enum CertificateType {
  case documentSigningCertificate
  case issuerSigningCertificate
  public static func == (a: VideoIDSDK.CertificateType, b: VideoIDSDK.CertificateType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, *)
public enum CertificateItem : Swift.String {
  case fingerprint
  case issuerName
  case subjectName
  case serialNumber
  case signatureAlgorithm
  case publicKeyAlgorithm
  case notBefore
  case notAfter
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 13, *)
public class X509Wrapper {
  final public let cert: Swift.OpaquePointer
  public init?(with cert: Swift.OpaquePointer?)
  public func getItemsAsDict() -> [VideoIDSDK.CertificateItem : Swift.String]
  public func certToPEM() -> Swift.String
  public func getFingerprint() -> Swift.String?
  public func getNotBeforeDate() -> Swift.String?
  public func getNotAfterDate() -> Swift.String?
  public func getSerialNumber() -> Swift.String?
  public func getSignatureAlgorithm() -> Swift.String?
  public func getPublicKeyAlgorithm() -> Swift.String?
  public func getIssuerName() -> Swift.String?
  public func getSubjectName() -> Swift.String?
  @objc deinit
}
public enum SecurityErrorCode : Swift.UInt16 {
  case acceptFailed
  case pinningFailed
  public init?(rawValue: Swift.UInt16)
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
public enum PinningState {
  case success
  case failed(CoreFoundation.CFError?)
}
public protocol CertificatePinning : AnyObject {
  func evaluateTrust(trust: Security.SecTrust, domain: Swift.String?, completion: ((VideoIDSDK.PinningState) -> ()))
}
public protocol HeaderValidator : AnyObject {
  func validate(headers: [Swift.String : Swift.String], key: Swift.String) -> Swift.Error?
}
@_hasMissingDesignatedInitializers public class Style {
  public struct Preview {
    public static var color: UIKit.UIColor
  }
  public struct Spinner {
    public static var color: UIKit.UIColor
  }
  public struct CloseButton {
    public static var icon: UIKit.UIImage?
  }
  public struct CloseGreyButton {
    public static var icon: UIKit.UIImage?
  }
  public struct ConfirmationButton {
    public static var backgroundColorNormal: UIKit.UIColor
    public static var backgroundColorHighlighted: UIKit.UIColor
    public static var backgroundColorDisabled: UIKit.UIColor
    public static var textColorNormal: UIKit.UIColor
    public static var textColorHighlighted: UIKit.UIColor
    public static var textColorDisabled: UIKit.UIColor
    public static var textFont: UIKit.UIFont?
    public static var cornerRadius: CoreFoundation.CGFloat
    public static var height: CoreFoundation.CGFloat
  }
  public struct LinkButton {
    public static var backgroundColorNormal: UIKit.UIColor
    public static var backgroundColorHighlighted: UIKit.UIColor
    public static var backgroundColorDisabled: UIKit.UIColor
    public static var textColorNormal: UIKit.UIColor
    public static var textColorHighlighted: UIKit.UIColor
    public static var textColorDisabled: UIKit.UIColor
    public static var textFont: UIKit.UIFont?
    public static var cornerRadius: CoreFoundation.CGFloat
    public static var height: CoreFoundation.CGFloat
  }
  public struct HoloLinkButton {
    public static var backgroundColorNormal: UIKit.UIColor
    public static var backgroundColorHighlighted: UIKit.UIColor
    public static var backgroundColorDisabled: UIKit.UIColor
    public static var textColorNormal: UIKit.UIColor
    public static var textColorHighlighted: UIKit.UIColor
    public static var textColorDisabled: UIKit.UIColor
    public static var textFont: UIKit.UIFont?
    public static var cornerRadius: CoreFoundation.CGFloat
    public static var height: CoreFoundation.CGFloat
  }
  public struct AccessoryButton {
    public static var backgroundColorNormal: UIKit.UIColor
    public static var backgroundColorHighlighted: UIKit.UIColor
    public static var backgroundColorDisabled: UIKit.UIColor
    public static var textColorNormal: UIKit.UIColor
    public static var textColorHighlighted: UIKit.UIColor
    public static var textColorDisabled: UIKit.UIColor
    public static var textFont: UIKit.UIFont?
    public static var placeholderTextColor: UIKit.UIColor
    public static var placeholderTextFont: UIKit.UIFont?
    public static var cornerRadius: CoreFoundation.CGFloat
    public static var borderWidthNormal: CoreFoundation.CGFloat
    public static var borderWidthHighlighted: CoreFoundation.CGFloat
    public static var borderWidthDisabled: CoreFoundation.CGFloat
    public static var borderColorNormal: UIKit.UIColor
    public static var borderColorHighlighted: UIKit.UIColor
    public static var borderColorDisabled: UIKit.UIColor
    public static var height: CoreFoundation.CGFloat
  }
  public struct BorderedButton {
    public static var backgroundColorNormal: UIKit.UIColor
    public static var backgroundColorHighlighted: UIKit.UIColor
    public static var backgroundColorDisabled: UIKit.UIColor
    public static var textColorNormal: UIKit.UIColor
    public static var textColorHighlighted: UIKit.UIColor
    public static var textColorDisabled: UIKit.UIColor
    public static var textFont: UIKit.UIFont?
    public static var height: CoreFoundation.CGFloat
    public static var cornerRadius: CoreFoundation.CGFloat
    public static var borderColor: UIKit.UIColor
    public static var borderWidth: CoreFoundation.CGFloat
  }
  public struct PlainButton {
    public static var backgroundColorNormal: UIKit.UIColor
    public static var backgroundColorHighlighted: UIKit.UIColor
    public static var backgroundColorDisabled: UIKit.UIColor
    public static var textColorNormal: UIKit.UIColor
    public static var textColorHighlighted: UIKit.UIColor
    public static var textColorDisabled: UIKit.UIColor
    public static var textFont: UIKit.UIFont?
    public static var height: CoreFoundation.CGFloat
    public static var cornerRadius: CoreFoundation.CGFloat
    public static var borderColor: UIKit.UIColor
    public static var borderWidth: CoreFoundation.CGFloat
  }
  public struct WhiteTextField {
    public static var backgroundColor: UIKit.UIColor
    public static var borderColor: UIKit.UIColor
    public static var borderWidthNormal: CoreFoundation.CGFloat
    public static var borderWidthHighlighted: CoreFoundation.CGFloat
    public static var textFont: UIKit.UIFont?
    public static var textColor: UIKit.UIColor
    public static var placeholderFont: UIKit.UIFont?
    public static var placeholderColor: UIKit.UIColor
    public static var height: CoreFoundation.CGFloat
    public static var cornerRadius: CoreFoundation.CGFloat
  }
  public struct SingleChatWhiteTextField {
    public static var backgroundColor: UIKit.UIColor
    public static var borderColor: UIKit.UIColor
    public static var borderWidthNormal: CoreFoundation.CGFloat
    public static var borderWidthHighlighted: CoreFoundation.CGFloat
    public static var textFont: UIKit.UIFont?
    public static var textColor: UIKit.UIColor
    public static var height: CoreFoundation.CGFloat
    public static var width: CoreFoundation.CGFloat
    public static var cornerRadius: CoreFoundation.CGFloat
  }
  public struct SearchTextField {
    public static var searchIcon: UIKit.UIImage?
    public static var placeholderFont: UIKit.UIFont?
    public static var placeholderTextColor: UIKit.UIColor
    public static var textFont: UIKit.UIFont?
    public static var textColor: UIKit.UIColor
  }
  public struct ItemsList {
    public static var backgroundColor: UIKit.UIColor
    public static var closeIcon: UIKit.UIImage?
    public static var separatorLineColor: UIKit.UIColor
    public static var itemsBackgroundColor: UIKit.UIColor
    public static var itemsSelectedBackgroundColor: UIKit.UIColor
    public static var itemsTextFont: UIKit.UIFont?
    public static var itemsTextColor: UIKit.UIColor
  }
  public struct Roi {
    public static var backgroundColor: UIKit.UIColor
    public static var linesColor: UIKit.UIColor
    public static var linesColorSuccess: UIKit.UIColor
    public static var linesColorError: UIKit.UIColor
    public static var linesColorWarning: UIKit.UIColor
    public static var linesWidth: CoreFoundation.CGFloat
    public static var textFont: UIKit.UIFont?
    public static var textColor: UIKit.UIColor
  }
  public struct Highlight {
    public static var linesColorNormal: UIKit.UIColor
    public static var linesColorSuccess: UIKit.UIColor
    public static var linesColorWarning: UIKit.UIColor
    public static var linesColorError: UIKit.UIColor
    public static var linesWidth: CoreFoundation.CGFloat
  }
  public struct TextNotification {
    public static var backgroundColor: UIKit.UIColor
    public static var textColor: UIKit.UIColor
    public static var textFont: UIKit.UIFont?
    public static var successImage: UIKit.UIImage?
    public static var warningImage: UIKit.UIImage?
  }
  public struct WellDoneNotification {
    public static var backgroundColor: UIKit.UIColor
    public static var animationBackgroundColor: UIKit.UIColor
    public static var textFont: UIKit.UIFont?
    public static var animationSize: CoreFoundation.CGSize
    public static var textColor: UIKit.UIColor
    public static var textAlignment: UIKit.NSTextAlignment
  }
  public struct CameraPermissionsNotification {
    public static var backgroundColor: UIKit.UIColor
    public static var textAlignment: UIKit.NSTextAlignment
    public static var textFont: UIKit.UIFont?
    public static var titleFont: UIKit.UIFont?
    public static var subtitleFont: UIKit.UIFont?
    public static var textColor: UIKit.UIColor
    public static var titleColor: UIKit.UIColor
    public static var subtitleColor: UIKit.UIColor
  }
  public struct ProcessRequirementsNotification {
    public static var backgroundColor: UIKit.UIColor
    public static var titleFont: UIKit.UIFont?
    public static var titleTextColor: UIKit.UIColor
    public static var titleTextAlignment: UIKit.NSTextAlignment
    public static var itemsFont: UIKit.UIFont?
    public static var itemsTextColor: UIKit.UIColor
  }
  public struct NfcReadNotification {
    public static var backgroundColor: UIKit.UIColor
    public static var titleFont: UIKit.UIFont?
    public static var titleTextColor: UIKit.UIColor
    public static var titleTextAlignment: UIKit.NSTextAlignment
    public static var itemsFont: UIKit.UIFont?
    public static var itemsTextColor: UIKit.UIColor
  }
  public struct CarouselNotification {
    public static var backgroundColor: UIKit.UIColor
    public static var animationBackgroundColor: UIKit.UIColor
    public static var currentPageIndicatorTintColor: UIKit.UIColor
    public static var pageIndicatorTintColor: UIKit.UIColor
    public static var itemFont: UIKit.UIFont?
    public static var itemTextColor: UIKit.UIColor
    public static var itemTextAlignment: UIKit.NSTextAlignment
  }
  public struct MediaNotification {
    public static var backgroundColor: UIKit.UIColor
    public static var textFont: UIKit.UIFont?
    public static var textColor: UIKit.UIColor
    public static var textAlignment: UIKit.NSTextAlignment
    public static var animationBackgroundColor: UIKit.UIColor
    public static var descriptionTextFont: UIKit.UIFont?
    public static var descriptionTextColor: UIKit.UIColor
    public static var descriptionTextAlignment: UIKit.NSTextAlignment
  }
  public struct MediaHologramNotification {
    public static var backgroundColor: UIKit.UIColor
    public static var animationBackgroundColor: UIKit.UIColor
    public static var textFont: UIKit.UIFont?
    public static var textAlignment: UIKit.NSTextAlignment
    public static var textColor: UIKit.UIColor
  }
  public struct CaptchaNotification {
    public static var backgroundColor: UIKit.UIColor
    public static var textFont: UIKit.UIFont?
    public static var textColor: UIKit.UIColor
    public static var textAlignment: UIKit.NSTextAlignment
    public static var retryTextFont: UIKit.UIFont?
    public static var retryTextColor: UIKit.UIColor
    public static var retryTextAlignment: UIKit.NSTextAlignment
  }
  public struct ErrorNotification {
    public static var backgroundColor: UIKit.UIColor
    public static var textFont: UIKit.UIFont?
    public static var textColor: UIKit.UIColor
    public static var textAlignment: UIKit.NSTextAlignment
    public static var descriptionTextFont: UIKit.UIFont?
    public static var descriptionTextColor: UIKit.UIColor
    public static var descriptionTextAlignment: UIKit.NSTextAlignment
    public static var linkTextFont: UIKit.UIFont?
    public static var linkTextColor: UIKit.UIColor
    public static var linkTextAlignment: UIKit.NSTextAlignment
  }
  public struct WarningNotification {
    public static var backgroundColor: UIKit.UIColor
    public static var textFont: UIKit.UIFont?
    public static var textColor: UIKit.UIColor
    public static var textAlignment: UIKit.NSTextAlignment
    public static var descriptionTextFont: UIKit.UIFont?
    public static var descriptionTextColor: UIKit.UIColor
    public static var descriptionTextAlignment: UIKit.NSTextAlignment
  }
  public struct DocumentSelectionNotification {
    public static var backgroundColor: UIKit.UIColor
    public static var titleTextFont: UIKit.UIFont?
    public static var titleTextColor: UIKit.UIColor
    public static var titleTextAlignment: UIKit.NSTextAlignment
    public static var descriptionTextFont: UIKit.UIFont?
    public static var descriptionTextColor: UIKit.UIColor
    public static var descriptionTextAlignment: UIKit.NSTextAlignment
    public static var countryTextFont: UIKit.UIFont?
    public static var countryTextColor: UIKit.UIColor
    public static var countryTextAlignment: UIKit.NSTextAlignment
    public static var documentTextFont: UIKit.UIFont?
    public static var documentTextColor: UIKit.UIColor
    public static var documentTextAlignment: UIKit.NSTextAlignment
    public static var infoImage: UIKit.UIImage?
  }
  public struct PhoneRequestNotification {
    public static var backgroundColor: UIKit.UIColor
    public static var titleTextFont: UIKit.UIFont?
    public static var titleTextColor: UIKit.UIColor
    public static var titleTextAlignment: UIKit.NSTextAlignment
    public static var descriptionTextFont: UIKit.UIFont?
    public static var descriptionTextColor: UIKit.UIColor
    public static var descriptionTextAlignment: UIKit.NSTextAlignment
    public static var infoImage: UIKit.UIImage?
  }
  public struct Commons {
    public static var mainBackgroundColor: UIKit.UIColor
    public static var mainGrayBackgroundColor: UIKit.UIColor
  }
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func removeAllConstraints()
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CustomPhoneRequestViewController : VideoIDSDK.CustomNotificationViewController<VideoIDSDK.PhoneRequestNotification> {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) override public init(notification: VideoIDSDK.PhoneRequestNotification, nibName: Swift.String)
  @_Concurrency.MainActor(unsafe) override public init(notification: VideoIDSDK.PhoneRequestNotification)
  @objc deinit
}
public class FoundationHTTPHandler : VideoIDSDK.HTTPHandler {
  public init()
  public func convert(request: Foundation.URLRequest) -> Foundation.Data
  public func parse(data: Foundation.Data) -> Swift.Int
  public func register(delegate: VideoIDSDK.HTTPHandlerDelegate)
  @objc deinit
}
public struct DocumentSelectionNotification {
  public let name: Swift.String?
  public var title: Swift.String?
  public var description: Swift.String?
  public var idTypes: [VideoIDSDK.IdType]?
  public var countrySelectorText: Swift.String?
  public var documentSelectorText: Swift.String?
  public var actionText: Swift.String?
  public var action: ((_ idtype: Swift.Int?) -> ())?
}
public protocol CompressionHandler {
  func load(headers: [Swift.String : Swift.String])
  func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  func compress(data: Foundation.Data) -> Foundation.Data?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class EidSpinner : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public class var sharedInstance: VideoIDSDK.EidSpinner {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var subtitleLabel: UIKit.UILabel?
  @_Concurrency.MainActor(unsafe) public var outerColor: UIKit.UIColor? {
    get
    set(newColor)
  }
  @_Concurrency.MainActor(unsafe) public var innerColor: UIKit.UIColor? {
    get
    set(newColor)
  }
  @_Concurrency.MainActor(unsafe) public var newColor: UIKit.UIColor? {
    get
    set(newColor)
  }
  @_Concurrency.MainActor(unsafe) public class func useContainerView(_ sv: UIKit.UIView?)
  @discardableResult
  @_Concurrency.MainActor(unsafe) public class func show(_ title: Swift.String, animated: Swift.Bool = true) -> VideoIDSDK.EidSpinner
  @discardableResult
  @_Concurrency.MainActor(unsafe) public class func show(duration: Swift.Double, title: Swift.String, animated: Swift.Bool = true) -> VideoIDSDK.EidSpinner
  @_Concurrency.MainActor(unsafe) public class func show(delay: Swift.Double, title: Swift.String, animated: Swift.Bool = true)
  @discardableResult
  @_Concurrency.MainActor(unsafe) public class func show(progress: Swift.Double, title: Swift.String) -> VideoIDSDK.EidSpinner
  @_Concurrency.MainActor(unsafe) public static var hideCancelsScheduledSpinners: Swift.Bool
  @_Concurrency.MainActor(unsafe) public class func hide(_ completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public class func setTitleFont(_ font: UIKit.UIFont?)
  @_Concurrency.MainActor(unsafe) public class func setTitleColor(_ color: UIKit.UIColor?)
  @_Concurrency.MainActor(unsafe) public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var frame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var animating: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func addTapHandler(_ tap: @escaping (() -> ()), subtitle subtitleText: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) public func clearTapHandler()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public func updateFrame()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func starting()
  @_Concurrency.MainActor(unsafe) public func loading()
  @_Concurrency.MainActor(unsafe) public func stop()
  @_Concurrency.MainActor(unsafe) public func set(color: UIKit.UIColor)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, *)
public class DataGroup12 : VideoIDSDK.DataGroup {
  public var issuingAuthority: Swift.String? {
    get
  }
  public var dateOfIssue: Swift.String? {
    get
  }
  public var otherPersonsDetails: Swift.String? {
    get
  }
  public var endorsementsOrObservations: Swift.String? {
    get
  }
  public var taxOrExitRequirements: Swift.String? {
    get
  }
  public var frontImage: [Swift.UInt8]? {
    get
  }
  public var rearImage: [Swift.UInt8]? {
    get
  }
  public var personalizationTime: Swift.String? {
    get
  }
  public var personalizationDeviceSerialNr: Swift.String? {
    get
  }
  @objc deinit
}
public struct CaptchaOTPNotification {
  public let name: Swift.String?
  public let description: Swift.String?
  public let phoneUpdate: Swift.String?
  public let audioUrl: Foundation.URL?
  public let length: Swift.Int?
  public let charset: VideoIDSDK.TextInputType?
  public let action1Text: Swift.String?
  public let action2Text: Swift.String?
  public var action1: ((_ phone: Swift.String?) -> ())?
  public var action2: (() -> ())?
}
public struct CameraPermissionRequestNotification {
  public let title: Swift.String?
  public let subtitle: Swift.String?
  public let name: Swift.String?
  public var description: Swift.String?
  public var audioUrl: Foundation.URL?
  public let imageURL: Foundation.URL?
  public var actionText: Swift.String?
  public var action: (() -> ())?
}
@available(iOS 13, *)
public enum NFCDocumentReaderError : Swift.Error {
  case ResponseError(Swift.String, Swift.UInt8, Swift.UInt8)
  case InvalidResponse
  case UnexpectedError
  case NFCNotSupported
  case NoConnectedTag
  case D087Malformed
  case InvalidResponseChecksum
  case MissingMandatoryFields
  case CannotDecodeASN1Length
  case InvalidASN1Value
  case UnableToProtectAPDU
  case UnableToUnprotectAPDU
  case UnsupportedDataGroup
  case DataGroupNotRead
  case UnknownTag
  case UnknownImageFormat
  case NotImplemented
  case TagNotValid
  case ConnectionError
  case UserCanceled
  case InvalidMRZKey
  case MoreThanOneTagFound
  case InvalidHashAlgorithmSpecified
  case InvalidDataPassed(Swift.String)
  case NotYetSupported(Swift.String)
}
@available(iOS 13, *)
extension VideoIDSDK.NFCDocumentReaderError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 13, *)
public enum OpenSSLError : Swift.Error {
  case UnableToGetX509CertificateFromPKCS7(Swift.String)
  case UnableToVerifyX509CertificateForSOD(Swift.String)
  case VerifyAndReturnSODEncapsulatedData(Swift.String)
  case UnableToReadECPublicKey(Swift.String)
  case UnableToExtractSignedDataFromPKCS7(Swift.String)
  case VerifySignedAttributes(Swift.String)
  case UnableToParseASN1(Swift.String)
  case UnableToDecryptRSASignature(Swift.String)
}
@available(iOS 13, *)
extension VideoIDSDK.OpenSSLError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum PassiveAuthenticationError : Swift.Error {
  case UnableToParseSODHashes(Swift.String)
  case InvalidDataGroupHash(Swift.String)
  case SODMissing(Swift.String)
}
extension VideoIDSDK.PassiveAuthenticationError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 13, *)
public enum DocTypeEnum : Swift.String {
  case TD1
  case TD2
  case OTHER
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, *)
public class DataGroup1 : VideoIDSDK.DataGroup {
  public var elements: [Swift.String : Swift.String] {
    get
  }
  @objc deinit
}
public struct WellDoneNotification {
  public let name: Swift.String?
  public var text: Swift.String?
  public var audioUrl: Foundation.URL?
  public var animationUrl: Foundation.URL?
  public var ttl: Swift.Int?
  public var ack: Swift.Bool?
  public var acknowledgeAction: (() -> ())?
}
public struct TextNotification {
  public let name: Swift.String?
  public let description: Swift.String?
  public let level: VideoIDSDK.NotificationLevel?
  public let ttl: Swift.Int?
  public let audioUrl: Foundation.URL?
  public let ack: (() -> ())?
}
public struct ROIShow {
}
public class WSEngine : VideoIDSDK.Engine, VideoIDSDK.TransportEventClient, VideoIDSDK.FramerEventClient, VideoIDSDK.FrameCollectorDelegate, VideoIDSDK.HTTPHandlerDelegate {
  public var respondToPingWithPong: Swift.Bool
  public init(transport: VideoIDSDK.Transport, certPinner: VideoIDSDK.CertificatePinning? = nil, headerValidator: VideoIDSDK.HeaderValidator = FoundationSecurity(), httpHandler: VideoIDSDK.HTTPHandler = FoundationHTTPHandler(), framer: VideoIDSDK.Framer = WSFramer(), compressionHandler: VideoIDSDK.CompressionHandler? = nil)
  public func register(delegate: VideoIDSDK.EngineDelegate)
  public func start(request: Foundation.URLRequest)
  public func stop(closeCode: Swift.UInt16 = CloseCode.normal.rawValue)
  public func forceStop()
  public func write(string: Swift.String, completion: (() -> ())?)
  public func write(data: Foundation.Data, opcode: VideoIDSDK.FrameOpCode, completion: (() -> ())?)
  public func connectionChanged(state: VideoIDSDK.ConnectionState)
  public func didReceiveHTTP(event: VideoIDSDK.HTTPEvent)
  public func frameProcessed(event: VideoIDSDK.FrameEvent)
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  public func didForm(event: VideoIDSDK.FrameCollector.Event)
  @objc deinit
}
@available(iOS 13, *)
public class BACHandler {
  public var ksenc: [Swift.UInt8]
  public var ksmac: [Swift.UInt8]
  public var kifd: [Swift.UInt8]
  public init()
  public init(tagReader: VideoIDSDK.TagReader)
  public func performBACAndGetSessionKeys(mrzKey: Swift.String, completed: @escaping (_ error: VideoIDSDK.NFCDocumentReaderError?) -> ())
  public func sessionKeys(data: [Swift.UInt8]) throws -> ([Swift.UInt8], [Swift.UInt8], [Swift.UInt8])
  @objc deinit
}
public enum ConnectionEvent {
  case connected([Swift.String : Swift.String])
  case disconnected(Swift.String, Swift.UInt16)
  case text(Swift.String)
  case binary(Foundation.Data)
  case pong(Foundation.Data?)
  case ping(Foundation.Data?)
  case error(Swift.Error)
}
public protocol Connection {
  func write(data: Foundation.Data, opcode: VideoIDSDK.FrameOpCode)
}
public protocol ConnectionDelegate : AnyObject {
  func didReceive(event: VideoIDSDK.ServerEvent)
}
public enum ServerEvent {
  case connected(VideoIDSDK.Connection, [Swift.String : Swift.String])
  case disconnected(VideoIDSDK.Connection, Swift.String, Swift.UInt16)
  case text(VideoIDSDK.Connection, Swift.String)
  case binary(VideoIDSDK.Connection, Foundation.Data)
  case pong(VideoIDSDK.Connection, Foundation.Data?)
  case ping(VideoIDSDK.Connection, Foundation.Data?)
}
public protocol Server {
  func start(address: Swift.String, port: Swift.UInt16) -> Swift.Error?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, *)
public class NotImplementedDG : VideoIDSDK.DataGroup {
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class CertIDSDKViewController : VideoIDSDK.BaseViewController {
  @_Concurrency.MainActor(unsafe) public static var passportNumber: Swift.String
  @_Concurrency.MainActor(unsafe) public static var dateOfBirth: Swift.String
  @_Concurrency.MainActor(unsafe) public static var dateOfExpiry: Swift.String
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public init(environment: VideoIDSDK.SDKEnvironment, docType: Swift.Int? = nil, language: Swift.String? = nil, docTypes: [Swift.Int]? = nil)
  @objc @_Concurrency.MainActor(unsafe) public init(environment: VideoIDSDK.SDKEnvironment, docType: Foundation.NSNumber? = nil, language: Swift.String? = nil, docTypes: [Swift.Int]? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class ChipAuthenticationPublicKeyInfo : VideoIDSDK.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class SecurityInfo {
  public func getObjectIdentifier() -> Swift.String
  public func getProtocolOIDString() -> Swift.String
  @objc deinit
}
@available(iOS 13, *)
public protocol EmrtdReaderManagerDelegate : AnyObject {
  func onFilesRead(files: [VideoIDSDK.EFFile : VideoIDSDK.EFRaw], active: Swift.Bool, notificationShowEvent: VideoIDSDK.NotificationShowEvent)
  func onProgressRead(readingProgress: VideoIDSDK.ReadingProgress)
  func onErrorRead(error: Swift.String, errorDoc: VideoIDSDK.NFCDocumentReaderError?, readingProgress: VideoIDSDK.ReadingProgress, notificationShowEvent: VideoIDSDK.NotificationShowEvent)
  func showDontMove()
}
@objc @available(iOS 13, *)
public class EmrtdReaderManager : ObjectiveC.NSObject {
  public var delegate: VideoIDSDK.EmrtdReaderManagerDelegate?
  public var passiveAuthenticationUsesOpenSSL: Swift.Bool
  public var isActive: Swift.Bool
  public init(logLevel: VideoIDSDK.LogLevel = .info, masterListURL: Foundation.URL? = nil)
  public func overrideNFCDataAmountToRead(amount: Swift.Int)
  @objc deinit
}
@available(iOS 13, *)
extension VideoIDSDK.EmrtdReaderManager : CoreNFC.NFCTagReaderSessionDelegate {
  public func tagReaderSessionDidBecomeActive(_ session: CoreNFC.NFCTagReaderSession)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: Swift.Error)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
  public func setReaderText(text: Swift.String?, dots: Swift.Bool)
}
public enum TCPTransportError : Swift.Error {
  case invalidRequest
  public static func == (a: VideoIDSDK.TCPTransportError, b: VideoIDSDK.TCPTransportError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public class TCPTransport : VideoIDSDK.Transport {
  public var usingTLS: Swift.Bool {
    get
  }
  public init(connection: Network.NWConnection)
  public init()
  public func connect(url: Foundation.URL, timeout: Swift.Double = 10, certificatePinning: VideoIDSDK.CertificatePinning? = nil)
  public func disconnect()
  public func register(delegate: VideoIDSDK.TransportEventClient)
  public func write(data: Foundation.Data, completion: @escaping ((Swift.Error?) -> ()))
  @objc deinit
}
public protocol FrameCollectorDelegate : AnyObject {
  func didForm(event: VideoIDSDK.FrameCollector.Event)
  func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
}
@_hasMissingDesignatedInitializers public class FrameCollector {
  public enum Event {
    case text(Swift.String)
    case binary(Foundation.Data)
    case pong(Foundation.Data?)
    case ping(Foundation.Data?)
    case error(Swift.Error)
    case closed(Swift.String, Swift.UInt16)
  }
  public func add(frame: VideoIDSDK.Frame)
  @objc deinit
}
public enum FoundationSecurityError : Swift.Error {
  case invalidRequest
  public static func == (a: VideoIDSDK.FoundationSecurityError, b: VideoIDSDK.FoundationSecurityError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class FoundationSecurity {
  public init(allowSelfSigned: Swift.Bool = false)
  @objc deinit
}
extension VideoIDSDK.FoundationSecurity : VideoIDSDK.CertificatePinning {
  public func evaluateTrust(trust: Security.SecTrust, domain: Swift.String?, completion: ((VideoIDSDK.PinningState) -> ()))
}
extension VideoIDSDK.FoundationSecurity : VideoIDSDK.HeaderValidator {
  public func validate(headers: [Swift.String : Swift.String], key: Swift.String) -> Swift.Error?
}
@_hasMissingDesignatedInitializers public class FoundationHTTPServerHandler : VideoIDSDK.HTTPServerHandler {
  public func register(delegate: VideoIDSDK.HTTPServerDelegate)
  public func createResponse(headers: [Swift.String : Swift.String]) -> Foundation.Data
  public func parse(data: Foundation.Data)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
public class NativeEngine : ObjectiveC.NSObject, VideoIDSDK.Engine, Foundation.URLSessionDataDelegate, Foundation.URLSessionWebSocketDelegate {
  public func register(delegate: VideoIDSDK.EngineDelegate)
  public func start(request: Foundation.URLRequest)
  public func stop(closeCode: Swift.UInt16)
  public func forceStop()
  public func write(string: Swift.String, completion: (() -> ())?)
  public func write(data: Foundation.Data, opcode: VideoIDSDK.FrameOpCode, completion: (() -> ())?)
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didOpenWithProtocol protocol: Swift.String?)
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didCloseWith closeCode: Foundation.URLSessionWebSocketTask.CloseCode, reason: Foundation.Data?)
  @objc override dynamic public init()
  @objc deinit
}
public enum EFFile : Swift.Int, Swift.CaseIterable {
  case COM
  case DG1
  case DG2
  case DG3
  case DG4
  case DG5
  case DG6
  case DG7
  case DG8
  case DG9
  case DG10
  case DG11
  case DG12
  case DG13
  case DG14
  case DG15
  case DG16
  case SOD
  case Unknown
  public func getName() -> Swift.String
  public static func getIDFromName(name: Swift.String) -> VideoIDSDK.EFFile
  @available(iOS 13, *)
  public func getReadingProgressFinish() -> VideoIDSDK.ReadingProgress
  @available(iOS 13, *)
  public func getReadingProgressInit() -> VideoIDSDK.ReadingProgress
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [VideoIDSDK.EFFile]
  public typealias RawValue = Swift.Int
  public static var allCases: [VideoIDSDK.EFFile] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, *)
public class DataGroup15 : VideoIDSDK.DataGroup {
  public var rsaPublicKey: Swift.OpaquePointer? {
    get
  }
  public var ecdsaPublicKey: Swift.OpaquePointer? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers public class GetVideoIDAuthorizationInteractor : VideoIDSDK.GetAuthorizationInteractorImp {
  override public func getAuthorizationFor(endpoint: Swift.String, bearer: Swift.String, rAuthority: Swift.String, externalReference: Swift.String? = nil, phoneNumber: Swift.String? = nil, onResult: @escaping (Swift.String?) -> Swift.Void, onError: @escaping (Swift.Error?) -> Swift.Void)
  override public init()
  @objc deinit
}
@available(iOS 13, *)
public class PACEHandler {
  public init(cardAccess: VideoIDSDK.CardAccess, tagReader: VideoIDSDK.TagReader) throws
  public func doPACE(mrzKey: Swift.String, completed: @escaping (Swift.Bool) -> ())
  @objc deinit
}
@available(iOS 13, *)
public struct EFRaw {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, *)
public class DataGroup7 : VideoIDSDK.DataGroup {
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
@objc public protocol VideoIDDelegate {
  @objc func onComplete(videoID: Swift.String)
  @objc func onError(code: Swift.String, message: Swift.String?)
}
public enum SecureMessagingSupportedAlgorithms {
  case DES
  case AES
  public static func == (a: VideoIDSDK.SecureMessagingSupportedAlgorithms, b: VideoIDSDK.SecureMessagingSupportedAlgorithms) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, *)
public class SecureMessaging {
  public init(encryptionAlgorithm: VideoIDSDK.SecureMessagingSupportedAlgorithms = .DES, ksenc: [Swift.UInt8], ksmac: [Swift.UInt8], ssc: [Swift.UInt8])
  @objc deinit
}
@available(iOS 13, *)
public enum ReadingProgress : Swift.Int {
  case START_TAG_LISTENING
  case TAG_DISCOVERED
  case OPEN_CARD_INIT
  case OPEN_CARD_FINISH
  case READ_INIT
  case DG1_INIT
  case DG1_FINISH
  case DG2_INIT
  case DG2_FINISH
  case DG7_INIT
  case DG7_FINISH
  case DG11_INIT
  case DG11_FINISH
  case SOD_INIT
  case SOD_FINISH
  case COM_INIT
  case COM_FINISH
  case CHECKING_VALIDITY_INIT
  case CHECKING_VALIDITY_FINISH
  case READ_FINISH
  case STOP_TAG_LISTENING
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum FoundationTransportError : Swift.Error {
  case invalidRequest
  case invalidOutputStream
  case timeout
  public static func == (a: VideoIDSDK.FoundationTransportError, b: VideoIDSDK.FoundationTransportError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public class FoundationTransport : ObjectiveC.NSObject, VideoIDSDK.Transport, Foundation.StreamDelegate {
  public var usingTLS: Swift.Bool {
    get
  }
  public init(streamConfiguration: ((Foundation.InputStream, Foundation.OutputStream) -> Swift.Void)? = nil)
  @objc deinit
  public func connect(url: Foundation.URL, timeout: Swift.Double = 10, certificatePinning: VideoIDSDK.CertificatePinning? = nil)
  public func disconnect()
  public func register(delegate: VideoIDSDK.TransportEventClient)
  public func write(data: Foundation.Data, completion: @escaping ((Swift.Error?) -> ()))
  @objc open func stream(_ aStream: Foundation.Stream, handle eventCode: Foundation.Stream.Event)
}
@_inheritsConvenienceInitializers @objc public class CheckRequirements : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func check(url: Swift.String, service: VideoIDSDK.VideoService, eager: Swift.Bool = false, onComplete: @escaping (VideoIDSDK.CheckResult) -> ())
  @objc deinit
}
public struct HighlightsShowEvent {
}
public struct Highlight {
}
public struct WarningNotification {
  public let name: Swift.String?
  public let title: Swift.String?
  public let description: Swift.String?
  public let audioUrl: Foundation.URL?
  public let imageURL: Foundation.URL?
  public let action1Text: Swift.String?
  public let action2Text: Swift.String?
  public let action3Text: Swift.String?
  public let closeText: Swift.String?
  public var action1: (() -> ())?
  public var action2: (() -> ())?
  public var action3: (() -> ())?
}
public enum NfcPropertiesStatus : Swift.String, Swift.Codable {
  case Enabled, Disabled, Unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) open class CustomCaptchaOTPViewController : VideoIDSDK.CaptchaDynamicViewController {
  @_Concurrency.MainActor(unsafe) final public let notification: VideoIDSDK.CaptchaOTPNotification
  @_Concurrency.MainActor(unsafe) public init(notification: VideoIDSDK.CaptchaOTPNotification)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public class WSCompression : VideoIDSDK.CompressionHandler {
  public init()
  public func load(headers: [Swift.String : Swift.String])
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  public func compress(data: Foundation.Data) -> Foundation.Data?
  @objc deinit
}
public class Ack : Swift.Encodable {
  public init(videoId: Swift.String? = "", notificationId: Swift.String? = "", input: Swift.String? = "")
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public enum ErrorType : Swift.Error {
  case compressionError
  case securityError
  case protocolError
  case serverError
  public static func == (a: VideoIDSDK.ErrorType, b: VideoIDSDK.ErrorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct WSError : Swift.Error {
  public let type: VideoIDSDK.ErrorType
  public let message: Swift.String
  public let code: Swift.UInt16
  public init(type: VideoIDSDK.ErrorType, message: Swift.String, code: Swift.UInt16)
}
public protocol WebSocketClient : AnyObject {
  func connect()
  func disconnect(closeCode: Swift.UInt16)
  func write(string: Swift.String, completion: (() -> ())?)
  func write(stringData: Foundation.Data, completion: (() -> ())?)
  func write(data: Foundation.Data, completion: (() -> ())?)
  func write(ping: Foundation.Data, completion: (() -> ())?)
  func write(pong: Foundation.Data, completion: (() -> ())?)
}
extension VideoIDSDK.WebSocketClient {
  public func write(string: Swift.String)
  public func write(data: Foundation.Data)
  public func write(ping: Foundation.Data)
  public func write(pong: Foundation.Data)
  public func disconnect()
}
public enum WebSocketEvent {
  case connected([Swift.String : Swift.String])
  case disconnected(Swift.String, Swift.UInt16)
  case text(Swift.String)
  case binary(Foundation.Data)
  case pong(Foundation.Data?)
  case ping(Foundation.Data?)
  case error(Swift.Error?)
  case viabilityChanged(Swift.Bool)
  case reconnectSuggested(Swift.Bool)
  case cancelled
}
public protocol WebSocketDelegate : AnyObject {
  func didReceive(event: VideoIDSDK.WebSocketEvent, client: VideoIDSDK.WebSocket)
}
open class WebSocket : VideoIDSDK.WebSocketClient, VideoIDSDK.EngineDelegate {
  weak public var delegate: VideoIDSDK.WebSocketDelegate?
  public var onEvent: ((VideoIDSDK.WebSocketEvent) -> Swift.Void)?
  public var request: Foundation.URLRequest
  public var cookies: [Foundation.HTTPCookie]?
  public var callbackQueue: Dispatch.DispatchQueue
  public var respondToPingWithPong: Swift.Bool {
    get
    set
  }
  public init(request: Foundation.URLRequest, engine: VideoIDSDK.Engine)
  convenience public init(request: Foundation.URLRequest, certPinner: VideoIDSDK.CertificatePinning? = FoundationSecurity(), compressionHandler: VideoIDSDK.CompressionHandler? = nil, useCustomEngine: Swift.Bool = true)
  public func connect()
  public func disconnect(closeCode: Swift.UInt16 = CloseCode.normal.rawValue)
  public func forceDisconnect()
  public func write(data: Foundation.Data, completion: (() -> ())?)
  public func write(string: Swift.String, completion: (() -> ())?)
  public func write(stringData: Foundation.Data, completion: (() -> ())?)
  public func write(ping: Foundation.Data, completion: (() -> ())?)
  public func write(pong: Foundation.Data, completion: (() -> ())?)
  public func didReceive(event: VideoIDSDK.WebSocketEvent)
  @objc deinit
}
@_inheritsConvenienceInitializers public class GetConferenceIDAuthorizationInteractor : VideoIDSDK.GetAuthorizationInteractorImp {
  override public func getAuthorizationFor(endpoint: Swift.String, bearer: Swift.String, rAuthority: Swift.String, externalReference: Swift.String? = nil, phoneNumber: Swift.String? = nil, onResult: @escaping (Swift.String?) -> Swift.Void, onError: @escaping (Swift.Error?) -> Swift.Void)
  override public init()
  @objc deinit
}
public enum CloseCode : Swift.UInt16 {
  case normal
  case goingAway
  case protocolError
  case protocolUnhandledType
  case noStatusReceived
  case encoding
  case policyViolated
  case messageTooBig
  public init?(rawValue: Swift.UInt16)
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
public enum FrameOpCode : Swift.UInt8 {
  case continueFrame
  case textFrame
  case binaryFrame
  case connectionClose
  case ping
  case pong
  case unknown
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct Frame {
}
public enum FrameEvent {
  case frame(VideoIDSDK.Frame)
  case error(Swift.Error)
}
public protocol FramerEventClient : AnyObject {
  func frameProcessed(event: VideoIDSDK.FrameEvent)
}
public protocol Framer {
  func add(data: Foundation.Data)
  func register(delegate: VideoIDSDK.FramerEventClient)
  func createWriteFrame(opcode: VideoIDSDK.FrameOpCode, payload: Foundation.Data, isCompressed: Swift.Bool) -> Foundation.Data
  func updateCompression(supports: Swift.Bool)
  func supportsCompression() -> Swift.Bool
}
public class WSFramer : VideoIDSDK.Framer {
  public var compressionEnabled: Swift.Bool
  public init(isServer: Swift.Bool = false)
  public func updateCompression(supports: Swift.Bool)
  public func supportsCompression() -> Swift.Bool
  public func add(data: Foundation.Data)
  public func register(delegate: VideoIDSDK.FramerEventClient)
  public func createWriteFrame(opcode: VideoIDSDK.FrameOpCode, payload: Foundation.Data, isCompressed: Swift.Bool) -> Foundation.Data
  @objc deinit
}
public protocol MyWSArrayType {
}
extension Swift.UInt8 : VideoIDSDK.MyWSArrayType {
}
extension Swift.Array where Element : Swift.UnsignedInteger, Element : VideoIDSDK.MyWSArrayType {
  public func readUint16(offset: Swift.Int) -> Swift.UInt16
  public func readUint64(offset: Swift.Int) -> Swift.UInt64
  public func unmaskData(maskStart: Swift.Int, offset: Swift.Int, length: Swift.Int) -> Foundation.Data
}
public func writeUint16(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt16)
public func writeUint32(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt32)
public func writeUint64(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt64)
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CustomDocumentSelectionNotificationViewController : VideoIDSDK.CustomNotificationViewController<VideoIDSDK.DocumentSelectionNotification> {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) override public init(notification: VideoIDSDK.DocumentSelectionNotification, nibName: Swift.String)
  @_Concurrency.MainActor(unsafe) override public init(notification: VideoIDSDK.DocumentSelectionNotification)
  @objc deinit
}
public enum HTTPUpgradeError : Swift.Error {
  case notAnUpgrade(Swift.Int)
  case invalidData
}
public struct HTTPWSHeader {
  public static func createUpgrade(request: Foundation.URLRequest, supportsCompression: Swift.Bool, secKeyValue: Swift.String) -> Foundation.URLRequest
  public static func generateWebSocketKey() -> Swift.String
}
public enum HTTPEvent {
  case success([Swift.String : Swift.String])
  case failure(Swift.Error)
}
public protocol HTTPHandlerDelegate : AnyObject {
  func didReceiveHTTP(event: VideoIDSDK.HTTPEvent)
}
public protocol HTTPHandler {
  func register(delegate: VideoIDSDK.HTTPHandlerDelegate)
  func convert(request: Foundation.URLRequest) -> Foundation.Data
  func parse(data: Foundation.Data) -> Swift.Int
}
public protocol HTTPServerDelegate : AnyObject {
  func didReceive(event: VideoIDSDK.HTTPEvent)
}
public protocol HTTPServerHandler {
  func register(delegate: VideoIDSDK.HTTPServerDelegate)
  func parse(data: Foundation.Data)
  func createResponse(headers: [Swift.String : Swift.String]) -> Foundation.Data
}
public struct URLParts {
}
extension Foundation.URL {
  public var isTLSScheme: Swift.Bool {
    get
  }
  public func getParts() -> VideoIDSDK.URLParts?
}
public class StringHTTPHandler : VideoIDSDK.HTTPHandler {
  public init()
  public func convert(request: Foundation.URLRequest) -> Foundation.Data
  public func parse(data: Foundation.Data) -> Swift.Int
  public func register(delegate: VideoIDSDK.HTTPHandlerDelegate)
  @objc deinit
}
@available(iOS 13, *)
public enum NFCViewDisplayMessage {
  case requestPresentDocument
  case authenticatingWithDocument(Swift.Int)
  case readingDataGroupProgress(VideoIDSDK.EFFile, Swift.Int)
  case error(VideoIDSDK.NFCDocumentReaderError)
  case successfulRead
}
@available(iOS 13, *)
extension VideoIDSDK.NFCViewDisplayMessage {
  public var description: Swift.String {
    get
  }
}
@available(iOS 13, *)
public func AESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public func AESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public func AESECBEncrypt(key: [Swift.UInt8], message: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public func tripleDESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public func tripleDESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public func DESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@available(iOS 13, *)
public func DESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
public enum DocumentType : Swift.String, Swift.Decodable {
  case idCard
  case passport
  case driverLicense
  case visa
  case face
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PassportAuthenticationStatus {
  case notDone
  case success
  case failed
  public static func == (a: VideoIDSDK.PassportAuthenticationStatus, b: VideoIDSDK.PassportAuthenticationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, *)
public class NFCDocumentModel {
  public var documentSigningCertificate: VideoIDSDK.X509Wrapper? {
    get
  }
  public var countrySigningCertificate: VideoIDSDK.X509Wrapper? {
    get
  }
  public var LDSVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  public var dataGroupsAvailable: [VideoIDSDK.EFFile] {
    get
  }
  public var dataGroupsRead: [VideoIDSDK.EFFile : VideoIDSDK.DataGroup] {
    get
  }
  public var dataGroupHashes: [VideoIDSDK.EFFile : VideoIDSDK.DataGroupHash] {
    get
  }
  public var cardAccess: VideoIDSDK.CardAccess? {
    get
  }
  public var BACStatus: VideoIDSDK.PassportAuthenticationStatus {
    get
  }
  public var PACEStatus: VideoIDSDK.PassportAuthenticationStatus {
    get
  }
  public var chipAuthenticationStatus: VideoIDSDK.PassportAuthenticationStatus {
    get
  }
  public var passportCorrectlySigned: Swift.Bool {
    get
  }
  public var documentSigningCertificateVerified: Swift.Bool {
    get
  }
  public var passportDataNotTampered: Swift.Bool {
    get
  }
  public var activeAuthenticationPassed: Swift.Bool {
    get
  }
  public var activeAuthenticationChallenge: [Swift.UInt8] {
    get
  }
  public var activeAuthenticationSignature: [Swift.UInt8] {
    get
  }
  public var verificationErrors: [Swift.Error] {
    get
  }
  public var isPACESupported: Swift.Bool {
    get
  }
  public var isChipAuthenticationSupported: Swift.Bool {
    get
  }
  public var passportImage: UIKit.UIImage? {
    get
  }
  public var signatureImage: UIKit.UIImage? {
    get
  }
  public var activeAuthenticationSupported: Swift.Bool {
    get
  }
  public init()
  public init(from dump: [Swift.String : Swift.String])
  public func addDataGroup(_ id: VideoIDSDK.EFFile, dataGroup: VideoIDSDK.DataGroup)
  public func getDataGroup(_ id: VideoIDSDK.EFFile) -> VideoIDSDK.DataGroup?
  public func dumpPassportData(selectedDataGroups: [VideoIDSDK.EFFile], includeActiveAuthenticationData: Swift.Bool = false) -> [Swift.String : Swift.String]
  public func getHashesForDatagroups(hashAlgorythm: Swift.String) -> [VideoIDSDK.EFFile : [Swift.UInt8]]
  public func verifyDocument(masterListURL: Foundation.URL?, useCMSVerification: Swift.Bool = false)
  public func verifyActiveAuthentication(challenge: [Swift.UInt8], signature: [Swift.UInt8])
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class TagReader {
  @objc deinit
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func loadGif(name: Swift.String)
  @available(iOS 9.0, *)
  @_Concurrency.MainActor(unsafe) public func loadGif(asset: Swift.String)
}
extension UIKit.UIImage {
  public class func gif(data: Foundation.Data) -> UIKit.UIImage?
  public class func gif(url: Swift.String) -> UIKit.UIImage?
  public class func gif(name: Swift.String) -> UIKit.UIImage?
  @available(iOS 9.0, *)
  public class func gif(asset: Swift.String) -> UIKit.UIImage?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, *)
public class COM : VideoIDSDK.DataGroup {
  public var version: Swift.String {
    get
  }
  public var unicodeVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class CardAccess {
  public var securityInfos: [VideoIDSDK.SecurityInfo] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class OpenSSLUtils {
  public static func getOpenSSLError() -> Swift.String
  @available(iOS 13, *)
  public static func getPublicKeyData(from key: Swift.OpaquePointer) -> [Swift.UInt8]?
  @available(iOS 13, *)
  public static func decodePublicKeyFromBytes(pubKeyData: [Swift.UInt8], params: Swift.OpaquePointer) -> Swift.OpaquePointer?
  public static func computeSharedSecret(privateKeyPair: Swift.OpaquePointer, publicKey: Swift.OpaquePointer) -> [Swift.UInt8]
  @objc deinit
}
public struct ErrorNotification {
  public let name: Swift.String?
  public let title: Swift.String?
  public let description: Swift.String?
  public let footerText: Swift.String?
  public let audioUrl: Foundation.URL?
  public let imageURL: Foundation.URL?
  public let action1Text: Swift.String?
  public let closeText: Swift.String?
  public let footerActionText: Swift.String?
  public var action1: (() -> ())?
  public var footerAction: (() -> ())?
}
public struct CaptchaTextNotification {
  public let name: Swift.String?
  public let description: Swift.String?
  public let audioUrl: Foundation.URL?
  public let imageUrl: Foundation.URL?
  public let length: Swift.Int?
  public let charset: VideoIDSDK.TextInputType?
  public let action1Text: Swift.String?
  public var action1: ((_ phone: Swift.String?) -> ())?
}
@_inheritsConvenienceInitializers public class GetVideoScanAuthorizationInteractor : VideoIDSDK.GetAuthorizationInteractorImp {
  override public func getAuthorizationFor(endpoint: Swift.String, bearer: Swift.String, rAuthority: Swift.String, externalReference: Swift.String? = nil, phoneNumber: Swift.String? = nil, onResult: @escaping (Swift.String?) -> Swift.Void, onError: @escaping (Swift.Error?) -> Swift.Void)
  override public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class DataGroup {
  public var datagroupType: VideoIDSDK.EFFile
  public var body: [Swift.UInt8] {
    get
  }
  public var data: [Swift.UInt8] {
    get
  }
  public func hash(_ hashAlgorythm: Swift.String) -> [Swift.UInt8]
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CustomMediaNotificationViewController : VideoIDSDK.CustomNotificationViewController<VideoIDSDK.MediaNotification> {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) override public init(notification: VideoIDSDK.MediaNotification, nibName: Swift.String)
  @_Concurrency.MainActor(unsafe) override public init(notification: VideoIDSDK.MediaNotification)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SynchronizedArray<T> {
  public func append(_ newElement: T)
  public func removeAtIndex(index: Swift.Int) -> T?
  public func itemAtIndex(index: Swift.Int) -> T?
  public var isEmpty: Swift.Bool {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func first() -> T?
  public func removeFirst() -> T?
  public func removeLast() -> T?
  public func removeAll()
  public subscript(index: Swift.Int) -> T {
    get
    set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, *)
public class DataGroup2 : VideoIDSDK.DataGroup {
  public var nrImages: Swift.Int {
    get
  }
  public var versionNumber: Swift.Int {
    get
  }
  public var lengthOfRecord: Swift.Int {
    get
  }
  public var numberOfFacialImages: Swift.Int {
    get
  }
  public var facialRecordDataLength: Swift.Int {
    get
  }
  public var nrFeaturePoints: Swift.Int {
    get
  }
  public var gender: Swift.Int {
    get
  }
  public var eyeColor: Swift.Int {
    get
  }
  public var hairColor: Swift.Int {
    get
  }
  public var featureMask: Swift.Int {
    get
  }
  public var expression: Swift.Int {
    get
  }
  public var poseAngle: Swift.Int {
    get
  }
  public var poseAngleUncertainty: Swift.Int {
    get
  }
  public var faceImageType: Swift.Int {
    get
  }
  public var imageDataType: Swift.Int {
    get
  }
  public var imageWidth: Swift.Int {
    get
  }
  public var imageHeight: Swift.Int {
    get
  }
  public var imageColorSpace: Swift.Int {
    get
  }
  public var sourceType: Swift.Int {
    get
  }
  public var deviceType: Swift.Int {
    get
  }
  public var quality: Swift.Int {
    get
  }
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
public enum ConnectionState {
  case connected
  case waiting
  case cancelled
  case failed(Swift.Error?)
  case viability(Swift.Bool)
  case shouldReconnect(Swift.Bool)
  case receive(Foundation.Data)
}
public protocol TransportEventClient : AnyObject {
  func connectionChanged(state: VideoIDSDK.ConnectionState)
}
public protocol Transport : AnyObject {
  func register(delegate: VideoIDSDK.TransportEventClient)
  func connect(url: Foundation.URL, timeout: Swift.Double, certificatePinning: VideoIDSDK.CertificatePinning?)
  func disconnect()
  func write(data: Foundation.Data, completion: @escaping ((Swift.Error?) -> ()))
  var usingTLS: Swift.Bool { get }
}
@objc @_Concurrency.MainActor(unsafe) open class CustomCaptchaTextViewController : VideoIDSDK.CaptchaDynamicViewController {
  @_Concurrency.MainActor(unsafe) final public let notification: VideoIDSDK.CaptchaTextNotification
  @_Concurrency.MainActor(unsafe) public init(notification: VideoIDSDK.CaptchaTextNotification)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum NotificationLevel : Swift.Int {
  case normal, warning, error, success, unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol ImageCacheType : AnyObject {
  func image(for url: Swift.String) -> UIKit.UIImage?
  func insertImage(_ image: UIKit.UIImage?, for url: Swift.String)
  func removeImage(for url: Swift.String)
  func removeAllImages()
  subscript(url: Swift.String) -> UIKit.UIImage? { get set }
}
final public class ImageCache : VideoIDSDK.ImageCacheType {
  public struct Config {
    public let countLimit: Swift.Int
    public let memoryLimit: Swift.Int
    public static let defaultConfig: VideoIDSDK.ImageCache.Config
  }
  public init(config: VideoIDSDK.ImageCache.Config = Config.defaultConfig)
  final public func image(for url: Swift.String) -> UIKit.UIImage?
  final public func insertImage(_ image: UIKit.UIImage?, for url: Swift.String)
  final public func removeImage(for url: Swift.String)
  final public func removeAllImages()
  final public subscript(key: Swift.String) -> UIKit.UIImage? {
    get
    set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NotificationShowEvent : VideoIDSDK.DecodableNotificationEvent<VideoIDSDK.NotificationShowData> {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NotificationShowData : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class VideoIDNotification : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class VideoIDNotificationData : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class VideoIDNotificationReading : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class NotificationReadingParams : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class NotificationReadingParamsAccessControl : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class NotificationReadingParamsAccessControlKey : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class NotificationTexts : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class NotificationResources : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class NotificationActions : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class NotificationActionDetail : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class NotificationInputs : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class NotificationTextInput : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class NotificationOthers : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class IdType : Swift.Codable {
  public var id: Swift.Int?
  public var country: Swift.String?
  public var countryName: Swift.String?
  public var type: Swift.String?
  public var name: Swift.String?
  public var documentIcon: Swift.String?
  public var flagIcon: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class PhoneCode : Swift.Codable {
  public var code: Swift.String?
  public var countryName: Swift.String?
  public var flagIcon: Swift.String?
  public var length: Swift.Int?
  public var minLength: Swift.Int?
  public var placeholder: Swift.String?
  public var selected: Swift.Bool?
  public func title() -> Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class NotificationOthersList : Swift.Codable {
  public var icon: Swift.String?
  public var number: Swift.String?
  public var text: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class TextInput : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public enum TextInputType : Swift.Int {
  case alphanumeric, numeric, alpha
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ShapeType : Swift.Int {
  case rectangle, elipse, unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class GetAuthorizationInteractorImp {
  public init()
  open func getAuthorizationFor(endpoint: Swift.String, bearer: Swift.String, rAuthority: Swift.String, externalReference: Swift.String? = nil, phoneNumber: Swift.String? = nil, onResult: @escaping (Swift.String?) -> Swift.Void, onError: @escaping (Swift.Error?) -> Swift.Void)
  @objc deinit
}
@available(iOS 13, *)
public struct DataGroupHash {
  public var id: Swift.String
  public var sodHash: Swift.String
  public var computedHash: Swift.String
  public var match: Swift.Bool
}
@objc public class EIDEvent : ObjectiveC.NSObject {
  open var name: Swift.String
  open var data: [Swift.String : Any]?
  @objc public init(name: Swift.String, data: [Swift.String : Any]?)
  @objc deinit
}
@_inheritsConvenienceInitializers public class GetSmileIDAuthorizationInteractor : VideoIDSDK.GetAuthorizationInteractorImp {
  override public func getAuthorizationFor(endpoint: Swift.String, bearer: Swift.String, rAuthority: Swift.String, externalReference: Swift.String? = nil, phoneNumber: Swift.String? = nil, onResult: @escaping (Swift.String?) -> Swift.Void, onError: @escaping (Swift.Error?) -> Swift.Void)
  override public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DecodableNotificationEvent<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum NotificationEventType : Swift.String, Swift.Codable {
  case text, media, carousel, modal, captcha, list, info
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CustomInfoItemsNotificationViewController : VideoIDSDK.CustomNotificationViewController<VideoIDSDK.InfoItemsNotification> {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) override public init(notification: VideoIDSDK.InfoItemsNotification, nibName: Swift.String)
  @_Concurrency.MainActor(unsafe) override public init(notification: VideoIDSDK.InfoItemsNotification)
  @objc deinit
}
public struct PhoneRequestNotification {
  public let name: Swift.String?
  public var title: Swift.String?
  public var description: Swift.String?
  public var prefixPlaceholder: Swift.String?
  public var phonePlaceholder: Swift.String?
  public var audioUrl: Foundation.URL?
  public var prefixes: [VideoIDSDK.PhoneCode]?
  public var actionText: Swift.String?
  public var action: ((_ phone: Swift.String?) -> ())?
}
@_hasMissingDesignatedInitializers public class SdkSettings : Swift.Decodable {
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class AudioSettings : Swift.Decodable {
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SdkMessages : Swift.Decodable {
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, *)
public class DataGroup11 : VideoIDSDK.DataGroup {
  public var fullName: Swift.String? {
    get
  }
  public var personalNumber: Swift.String? {
    get
  }
  public var dateOfBirth: Swift.String? {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var address: Swift.String? {
    get
  }
  public var telephone: Swift.String? {
    get
  }
  public var profession: Swift.String? {
    get
  }
  public var title: Swift.String? {
    get
  }
  public var personalSummary: Swift.String? {
    get
  }
  public var proofOfCitizenship: Swift.String? {
    get
  }
  public var tdNumbers: Swift.String? {
    get
  }
  public var custodyInfo: Swift.String? {
    get
  }
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class BaseViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: VideoIDSDK.VideoIDDelegate?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func initializeVideoSDK(environment: VideoIDSDK.SDKEnvironment, docType: Swift.Int? = nil, language: Swift.String? = nil, docTypes: [Swift.Int]? = nil, idDefault: Swift.Int? = nil)
  @_Concurrency.MainActor(unsafe) public func initializeVideoScanSDK(environment: VideoIDSDK.SDKEnvironment, docType: Swift.Int? = nil, language: Swift.String? = nil, docTypes: [Swift.Int]? = nil, idDefault: Swift.Int? = nil)
  @_Concurrency.MainActor(unsafe) public func initializeCertIDSDK(environment: VideoIDSDK.SDKEnvironment, docType: Swift.Int? = nil, language: Swift.String? = nil, docTypes: [Swift.Int]? = nil)
  @_Concurrency.MainActor(unsafe) public init(environment: VideoIDSDK.SDKEnvironment)
  @_Concurrency.MainActor(unsafe) open func getCustomHologramMultimediaNotification(notification: VideoIDSDK.MediaNotification) -> VideoIDSDK.CustomHologramMediaNotificationViewController?
  @_Concurrency.MainActor(unsafe) open func getCustomMultimediaNotification(notification: VideoIDSDK.MediaNotification) -> VideoIDSDK.CustomMediaNotificationViewController?
  @_Concurrency.MainActor(unsafe) open func getCustomWarningNotification(notification: VideoIDSDK.WarningNotification) -> VideoIDSDK.CustomWarningNotificationViewController?
  @_Concurrency.MainActor(unsafe) open func getCustomErrorNotificationViewController(notification: VideoIDSDK.ErrorNotification) -> VideoIDSDK.CustomErrorNotificationViewController?
  @_Concurrency.MainActor(unsafe) open func getCustomDocumentSelectionNotificationViewController(notification: VideoIDSDK.DocumentSelectionNotification) -> VideoIDSDK.CustomDocumentSelectionNotificationViewController?
  @_Concurrency.MainActor(unsafe) open func getCustomInfoItemsNotificationViewController(notification: VideoIDSDK.InfoItemsNotification) -> VideoIDSDK.CustomInfoItemsNotificationViewController?
  @_Concurrency.MainActor(unsafe) open func getCustomPermissionsInfoViewController(notification: VideoIDSDK.CameraPermissionRequestNotification) -> VideoIDSDK.CustomPermissionsInfoViewController?
  @_Concurrency.MainActor(unsafe) open func getCustomCarouselScrollViewController(notification: VideoIDSDK.CarouselNotification) -> VideoIDSDK.CustomCarouselScrollViewController?
  @_Concurrency.MainActor(unsafe) open func getCustomCaptchaTextViewController(notification: VideoIDSDK.CaptchaTextNotification) -> VideoIDSDK.CustomCaptchaTextViewController?
  @_Concurrency.MainActor(unsafe) open func getCustomCaptchaOTPViewController(notification: VideoIDSDK.CaptchaOTPNotification) -> VideoIDSDK.CustomCaptchaOTPViewController?
  @_Concurrency.MainActor(unsafe) open func getCustomPhoneRequestViewController(notification: VideoIDSDK.PhoneRequestNotification) -> VideoIDSDK.CustomPhoneRequestViewController?
  @_Concurrency.MainActor(unsafe) open func onPhaseStarted(phase: Swift.String)
  @_Concurrency.MainActor(unsafe) open func onPhaseCompleted(phase: Swift.String)
  @_Concurrency.MainActor(unsafe) open func onEvent(event: VideoIDSDK.EIDEvent)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
}
@objc @_Concurrency.MainActor(unsafe) public class SmileIDSDKViewController : VideoIDSDK.BaseViewController {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public init(environment: VideoIDSDK.SDKEnvironment, language: Swift.String? = nil)
  @objc deinit
}
public enum Process : Swift.String, Swift.Codable {
  case Attended, Unattended
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum LogLevel : Swift.Int, Swift.CaseIterable {
  case verbose
  case debug
  case info
  case warning
  case error
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [VideoIDSDK.LogLevel]
  public typealias RawValue = Swift.Int
  public static var allCases: [VideoIDSDK.LogLevel] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Log {
  public static var logLevel: VideoIDSDK.LogLevel
  public static var storeLogs: Swift.Bool
  public static var logData: [Swift.String]
  public class func verbose(_ msg: @autoclosure () -> Swift.String)
  public class func debug(_ msg: @autoclosure () -> Swift.String)
  public class func info(_ msg: @autoclosure () -> Swift.String)
  public class func warning(_ msg: @autoclosure () -> Swift.String)
  public class func error(_ msg: @autoclosure () -> Swift.String)
  public class func clearStoredLogs()
  @objc deinit
}
@available(iOS 13, *)
public class ASN1Item : Swift.CustomDebugStringConvertible {
  public init(line: Swift.String)
  public func getChild(_ child: Swift.Int) -> VideoIDSDK.ASN1Item?
  public func getNumberOfChildren() -> Swift.Int
  public var debugDescription: Swift.String {
    get
  }
  @objc deinit
}
@available(iOS 13, *)
public class SimpleASN1DumpParser {
  public init()
  public func parse(data: Foundation.Data) throws -> VideoIDSDK.ASN1Item
  public func test()
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CustomWarningNotificationViewController : VideoIDSDK.CustomNotificationViewController<VideoIDSDK.WarningNotification> {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) override public init(notification: VideoIDSDK.WarningNotification, nibName: Swift.String)
  @_Concurrency.MainActor(unsafe) override public init(notification: VideoIDSDK.WarningNotification)
  @objc deinit
}
public struct CarouselNotification {
  public let name: Swift.String?
  public let title: Swift.String?
  public let description: Swift.String?
  public let currentStep: Swift.Int?
  public let steps: Swift.Int?
  public let audioUrl: Foundation.URL?
  public let animationUrl: Foundation.URL?
  public let action1Text: Swift.String?
  public var action1: (() -> ())?
  public var next: (() -> ())?
  public var previous: (() -> ())?
}
public struct InfoItemsNotification {
  public let name: Swift.String?
  public var title: Swift.String?
  public var description: Swift.String?
  public var action1Text: Swift.String?
  public var action2Text: Swift.String?
  public var action3Text: Swift.String?
  public var closeText: Swift.String?
  public var list: [VideoIDSDK.NotificationOthersList]?
  public var action1: (() -> ())?
  public var action2: (() -> ())?
  public var action3: (() -> ())?
}
@objc @_Concurrency.MainActor(unsafe) public class VideoScanSDKViewController : VideoIDSDK.BaseViewController {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public init(environment: VideoIDSDK.SDKEnvironment, docType: Swift.Int? = nil, language: Swift.String? = nil, docTypes: [Swift.Int]? = nil, defaultId: Swift.Int?)
  @objc @_Concurrency.MainActor(unsafe) public init(environment: VideoIDSDK.SDKEnvironment, docType: Foundation.NSNumber? = nil, language: Swift.String? = nil, docTypes: [Swift.Int]? = nil)
  @objc deinit
}
@objc public enum VideoService : Swift.Int {
  case videoID
  case videoScan
  case smileID
  case certID
  case undefined
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum VideoServiceType : Swift.String {
  case VideoID, VideoScan, SmileID, CertID, Undefined
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class GetCertIDAuthorizationInteractor {
  public init()
  public func getAuthorizationForCertId(endpoint: Swift.String, bearer: Swift.String, videoId: Swift.String, externalReference: Swift.String? = nil, onResult: @escaping (Swift.String?) -> Swift.Void, onError: @escaping (Swift.Error?) -> Swift.Void)
  @objc deinit
}
public protocol EngineDelegate : AnyObject {
  func didReceive(event: VideoIDSDK.WebSocketEvent)
}
public protocol Engine {
  func register(delegate: VideoIDSDK.EngineDelegate)
  func start(request: Foundation.URLRequest)
  func stop(closeCode: Swift.UInt16)
  func forceStop()
  func write(data: Foundation.Data, opcode: VideoIDSDK.FrameOpCode, completion: (() -> ())?)
  func write(string: Swift.String, completion: (() -> ())?)
}
@objc public class SDKEnvironment : ObjectiveC.NSObject {
  final public let restURL: Swift.String
  final public let wsURL: Swift.String
  final public let authorization: Swift.String
  @objc public init(url: Swift.String, authorization: Swift.String)
  @objc deinit
}
@available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
@available(watchOS, unavailable)
public class WebSocketServer : VideoIDSDK.Server, VideoIDSDK.ConnectionDelegate {
  public var onEvent: ((VideoIDSDK.ServerEvent) -> Swift.Void)?
  public init()
  public func start(address: Swift.String, port: Swift.UInt16) -> Swift.Error?
  public func didReceive(event: VideoIDSDK.ServerEvent)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public class ServerConnection : VideoIDSDK.Connection, VideoIDSDK.HTTPServerDelegate, VideoIDSDK.FramerEventClient, VideoIDSDK.FrameCollectorDelegate, VideoIDSDK.TransportEventClient {
  public var onEvent: ((VideoIDSDK.ConnectionEvent) -> Swift.Void)?
  weak public var delegate: VideoIDSDK.ConnectionDelegate?
  public func write(data: Foundation.Data, opcode: VideoIDSDK.FrameOpCode)
  public func connectionChanged(state: VideoIDSDK.ConnectionState)
  public func didReceive(event: VideoIDSDK.HTTPEvent)
  public func frameProcessed(event: VideoIDSDK.FrameEvent)
  public func didForm(event: VideoIDSDK.FrameCollector.Event)
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class CheckResult : ObjectiveC.NSObject, Swift.Codable {
  @objc public var passed: Swift.Bool
  @objc public var result: VideoIDSDK.CheckResultData
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc public class CheckResultData : ObjectiveC.NSObject, Swift.Codable {
  @objc public var camera: VideoIDSDK.CameraData?
  @objc public var microphone: VideoIDSDK.Microphone?
  @objc public var nfc: VideoIDSDK.NFCData?
  @objc public var bandwidth: VideoIDSDK.Bandwidth?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc public class CameraData : ObjectiveC.NSObject, Swift.Codable {
  @objc public var passed: Swift.Bool
  @objc public var data: VideoIDSDK.DeviceRequirements
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc public class Microphone : ObjectiveC.NSObject, Swift.Codable {
  @objc public var passed: Swift.Bool
  @objc public var data: VideoIDSDK.DeviceRequirements
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc public class NFCData : ObjectiveC.NSObject, Swift.Codable {
  @objc public var passed: Swift.Bool
  @objc public var data: VideoIDSDK.DeviceRequirements
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc public class Bandwidth : ObjectiveC.NSObject, Swift.Codable {
  @objc public var passed: Swift.Bool
  @objc public var data: VideoIDSDK.BandwidthData
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc public class DeviceRequirements : ObjectiveC.NSObject, Swift.Codable {
  @objc public var found: Swift.Bool
  public var permissions: VideoIDSDK.Permissions?
  @objc public var permissionsStatus: VideoIDSDK.PermissionsStatus
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class BandwidthData : ObjectiveC.NSObject, Swift.Codable {
  @objc public var download: Swift.Double
  @objc public var upload: Swift.Double
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum Permissions : Swift.String, Swift.Codable {
  case Granted, Denied, Unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum PermissionsStatus : Swift.Int, Swift.Codable {
  case Granted = 0
  case Denied
  case Unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 13, *)
public struct ResponseAPDU {
  public var data: [Swift.UInt8]
  public var sw1: Swift.UInt8
  public var sw2: Swift.UInt8
  public init(data: [Swift.UInt8], sw1: Swift.UInt8, sw2: Swift.UInt8)
}
public enum PACEMappingType {
  case GM
  case IM
  case CAM
  public static func == (a: VideoIDSDK.PACEMappingType, b: VideoIDSDK.PACEMappingType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class PACEInfo : VideoIDSDK.SecurityInfo {
  public static let PARAM_ID_GFP_1024_160: Swift.Int
  public static let PARAM_ID_GFP_2048_224: Swift.Int
  public static let PARAM_ID_GFP_2048_256: Swift.Int
  public static let PARAM_ID_ECP_NIST_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P320_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P512_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P521_R1: Swift.Int
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getVersion() -> Swift.Int
  public func getParameterId() -> Swift.Int?
  public func getParameterSpec() throws -> Swift.Int32
  public func getMappingType() throws -> VideoIDSDK.PACEMappingType
  public func getKeyAgreementAlgorithm() throws -> Swift.String
  public func getCipherAlgorithm() throws -> Swift.String
  public func getDigestAlgorithm() throws -> Swift.String
  public func getKeyLength() throws -> Swift.Int
  public func createMappingKey() throws -> Swift.OpaquePointer
  public static func getParameterSpec(stdDomainParam: Swift.Int) throws -> Swift.Int32
  public static func toMappingType(oid: Swift.String) throws -> VideoIDSDK.PACEMappingType
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toDigestAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, *)
public class DataGroup14 : VideoIDSDK.DataGroup {
  public var securityInfos: [VideoIDSDK.SecurityInfo] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class ChipAuthenticationInfo : VideoIDSDK.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CustomHologramMediaNotificationViewController : VideoIDSDK.CustomNotificationViewController<VideoIDSDK.MediaNotification> {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) override public init(notification: VideoIDSDK.MediaNotification, nibName: Swift.String)
  @_Concurrency.MainActor(unsafe) override public init(notification: VideoIDSDK.MediaNotification)
  @objc deinit
}
@objc public enum Phase : Swift.Int {
  case front, back, face, captcha, hologram, nfc, fingerPrint
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class Quad : ObjectiveC.NSObject, Swift.Decodable {
  public var p1: VideoIDSDK.Point
  public var p2: VideoIDSDK.Point
  public var p3: VideoIDSDK.Point
  public var p4: VideoIDSDK.Point
  public var width: CoreFoundation.CGFloat {
    get
  }
  public var height: CoreFoundation.CGFloat {
    get
  }
  public init(p1: VideoIDSDK.Point, p2: VideoIDSDK.Point, p3: VideoIDSDK.Point, p4: VideoIDSDK.Point)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
public func binToHexRep(_ val: [Swift.UInt8], asArray: Swift.Bool = false) -> Swift.String
public func binToHexRep(_ val: Swift.UInt8) -> Swift.String
public func binToHex(_ val: Swift.UInt8) -> Swift.Int
public func binToHex(_ val: [Swift.UInt8]) -> Swift.UInt64
public func binToHex(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.UInt64
public func hexToBin(_ val: Swift.UInt64) -> [Swift.UInt8]
public func binToInt(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.Int
public func binToInt(_ val: [Swift.UInt8]) -> Swift.Int
public func intToBin(_ data: Swift.Int, pad: Swift.Int = 2) -> [Swift.UInt8]
public func hexRepToBin(_ val: Swift.String) -> [Swift.UInt8]
public func xor(_ kifd: [Swift.UInt8], _ response_kicc: [Swift.UInt8]) -> [Swift.UInt8]
public func generateRandomUInt8Array(_ size: Swift.Int) -> [Swift.UInt8]
public func pad(_ toPad: [Swift.UInt8], blockSize: Swift.Int) -> [Swift.UInt8]
public func unpad(_ tounpad: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public func mac(algoName: VideoIDSDK.SecureMessagingSupportedAlgorithms, key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public func desMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public func aesMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public func wrapDO(b: Swift.UInt8, arr: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public func unwrapDO(tag: Swift.UInt8, wrappedData: [Swift.UInt8]) throws -> [Swift.UInt8]
public func intToBytes(val: Swift.Int, removePadding: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, *)
public func oidToBytes(oid: Swift.String, replaceTag: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, *)
public func asn1Length(_ data: Swift.ArraySlice<Swift.UInt8>) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, *)
public func asn1Length(_ data: [Swift.UInt8]) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, *)
public func toAsn1Length(_ data: Swift.Int) throws -> [Swift.UInt8]
@available(iOS 13, *)
public func calcHash(data: [Swift.UInt8], hashAlgorithm: Swift.String) throws -> [Swift.UInt8]
@available(iOS 13, *)
public func calcSHA1Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public func calcSHA224Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public func calcSHA256Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public func calcSHA512Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public func calcSHA384Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@_hasMissingDesignatedInitializers public class StatsAck : Swift.Encodable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class StatsAckData : Swift.Encodable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public struct MediaNotification {
  public let name: Swift.String?
  public let title: Swift.String?
  public let subTitle: Swift.String?
  public let description: Swift.String?
  public let ttl: Swift.Int?
  public let audioUrl: Foundation.URL?
  public let animationURL: Foundation.URL?
  public let imageURL: Foundation.URL?
  public let gifURL: Foundation.URL?
  public let action1Text: Swift.String?
  public let action2Text: Swift.String?
  public let footerText: Swift.String?
  public let closeText: Swift.String?
  public var action2AfterDimmiss: Swift.Bool
  public var action1: (() -> ())?
  public var action2: (() -> ())?
  public var footerAction: (() -> ())?
  public var finishedAck: (() -> ())?
}
public enum FontType : Swift.String {
  case light
  case medium
  case regular
  case semiBold
  public func font(size: CoreFoundation.CGFloat) -> UIKit.UIFont?
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) open class VideoIDSDKViewController : VideoIDSDK.BaseViewController {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public init(environment: VideoIDSDK.SDKEnvironment, docType: Swift.Int? = nil, language: Swift.String? = nil, docTypes: [Swift.Int]? = nil, idDefault: Swift.Int?)
  @objc @_Concurrency.MainActor(unsafe) public init(environment: VideoIDSDK.SDKEnvironment, docType: Foundation.NSNumber? = nil, language: Swift.String? = nil, docTypes: [Swift.Int]? = nil)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class CaptchaDynamicViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) public func closeView(onComplete: @escaping () -> Swift.Void)
  @objc deinit
}
extension VideoIDSDK.CaptchaDynamicViewController : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
@_Concurrency.MainActor(unsafe) open class CustomNotificationViewController<TNotification> : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var notification: TNotification
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public init(notification: TNotification, nibName: Swift.String)
  @_Concurrency.MainActor(unsafe) public init(notification: TNotification)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CustomErrorNotificationViewController : VideoIDSDK.CustomNotificationViewController<VideoIDSDK.ErrorNotification> {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) override public init(notification: VideoIDSDK.ErrorNotification, nibName: Swift.String)
  @_Concurrency.MainActor(unsafe) override public init(notification: VideoIDSDK.ErrorNotification)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CustomCarouselScrollViewController : VideoIDSDK.CustomNotificationViewController<VideoIDSDK.CarouselNotification> {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) override public init(notification: VideoIDSDK.CarouselNotification, nibName: Swift.String)
  @_Concurrency.MainActor(unsafe) override public init(notification: VideoIDSDK.CarouselNotification)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class VideoIDEnvironment : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class VideoIDErrorNode : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CustomPermissionsInfoViewController : VideoIDSDK.CustomNotificationViewController<VideoIDSDK.CameraPermissionRequestNotification> {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) override public init(notification: VideoIDSDK.CameraPermissionRequestNotification, nibName: Swift.String)
  @_Concurrency.MainActor(unsafe) override public init(notification: VideoIDSDK.CameraPermissionRequestNotification)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Point : Swift.Codable {
  public var x: Swift.Int
  public var y: Swift.Int
  public func xCGFloat() -> CoreFoundation.CGFloat
  public func yCGFloat() -> CoreFoundation.CGFloat
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@available(iOS 13, *)
extension VideoIDSDK.CertificateType : Swift.Equatable {}
@available(iOS 13, *)
extension VideoIDSDK.CertificateType : Swift.Hashable {}
@available(iOS 13, *)
extension VideoIDSDK.CertificateItem : Swift.Equatable {}
@available(iOS 13, *)
extension VideoIDSDK.CertificateItem : Swift.Hashable {}
@available(iOS 13, *)
extension VideoIDSDK.CertificateItem : Swift.RawRepresentable {}
extension VideoIDSDK.SecurityErrorCode : Swift.Equatable {}
extension VideoIDSDK.SecurityErrorCode : Swift.Hashable {}
extension VideoIDSDK.SecurityErrorCode : Swift.RawRepresentable {}
@available(iOS 13, *)
extension VideoIDSDK.DocTypeEnum : Swift.Equatable {}
@available(iOS 13, *)
extension VideoIDSDK.DocTypeEnum : Swift.Hashable {}
@available(iOS 13, *)
extension VideoIDSDK.DocTypeEnum : Swift.RawRepresentable {}
extension VideoIDSDK.TCPTransportError : Swift.Equatable {}
extension VideoIDSDK.TCPTransportError : Swift.Hashable {}
extension VideoIDSDK.FoundationSecurityError : Swift.Equatable {}
extension VideoIDSDK.FoundationSecurityError : Swift.Hashable {}
extension VideoIDSDK.EFFile : Swift.Equatable {}
extension VideoIDSDK.EFFile : Swift.Hashable {}
extension VideoIDSDK.EFFile : Swift.RawRepresentable {}
extension VideoIDSDK.SecureMessagingSupportedAlgorithms : Swift.Equatable {}
extension VideoIDSDK.SecureMessagingSupportedAlgorithms : Swift.Hashable {}
@available(iOS 13, *)
extension VideoIDSDK.ReadingProgress : Swift.Equatable {}
@available(iOS 13, *)
extension VideoIDSDK.ReadingProgress : Swift.Hashable {}
@available(iOS 13, *)
extension VideoIDSDK.ReadingProgress : Swift.RawRepresentable {}
extension VideoIDSDK.FoundationTransportError : Swift.Equatable {}
extension VideoIDSDK.FoundationTransportError : Swift.Hashable {}
extension VideoIDSDK.NfcPropertiesStatus : Swift.Equatable {}
extension VideoIDSDK.NfcPropertiesStatus : Swift.Hashable {}
extension VideoIDSDK.NfcPropertiesStatus : Swift.RawRepresentable {}
extension VideoIDSDK.ErrorType : Swift.Equatable {}
extension VideoIDSDK.ErrorType : Swift.Hashable {}
extension VideoIDSDK.CloseCode : Swift.Equatable {}
extension VideoIDSDK.CloseCode : Swift.Hashable {}
extension VideoIDSDK.CloseCode : Swift.RawRepresentable {}
extension VideoIDSDK.FrameOpCode : Swift.Equatable {}
extension VideoIDSDK.FrameOpCode : Swift.Hashable {}
extension VideoIDSDK.FrameOpCode : Swift.RawRepresentable {}
extension VideoIDSDK.DocumentType : Swift.Equatable {}
extension VideoIDSDK.DocumentType : Swift.Hashable {}
extension VideoIDSDK.DocumentType : Swift.RawRepresentable {}
extension VideoIDSDK.PassportAuthenticationStatus : Swift.Equatable {}
extension VideoIDSDK.PassportAuthenticationStatus : Swift.Hashable {}
extension VideoIDSDK.NotificationLevel : Swift.Equatable {}
extension VideoIDSDK.NotificationLevel : Swift.Hashable {}
extension VideoIDSDK.NotificationLevel : Swift.RawRepresentable {}
extension VideoIDSDK.TextInputType : Swift.Equatable {}
extension VideoIDSDK.TextInputType : Swift.Hashable {}
extension VideoIDSDK.TextInputType : Swift.RawRepresentable {}
extension VideoIDSDK.ShapeType : Swift.Equatable {}
extension VideoIDSDK.ShapeType : Swift.Hashable {}
extension VideoIDSDK.ShapeType : Swift.RawRepresentable {}
extension VideoIDSDK.NotificationEventType : Swift.Equatable {}
extension VideoIDSDK.NotificationEventType : Swift.Hashable {}
extension VideoIDSDK.NotificationEventType : Swift.RawRepresentable {}
extension VideoIDSDK.Process : Swift.Equatable {}
extension VideoIDSDK.Process : Swift.Hashable {}
extension VideoIDSDK.Process : Swift.RawRepresentable {}
extension VideoIDSDK.LogLevel : Swift.Equatable {}
extension VideoIDSDK.LogLevel : Swift.Hashable {}
extension VideoIDSDK.LogLevel : Swift.RawRepresentable {}
extension VideoIDSDK.VideoService : Swift.Equatable {}
extension VideoIDSDK.VideoService : Swift.Hashable {}
extension VideoIDSDK.VideoService : Swift.RawRepresentable {}
extension VideoIDSDK.VideoServiceType : Swift.Equatable {}
extension VideoIDSDK.VideoServiceType : Swift.Hashable {}
extension VideoIDSDK.VideoServiceType : Swift.RawRepresentable {}
extension VideoIDSDK.Permissions : Swift.Equatable {}
extension VideoIDSDK.Permissions : Swift.Hashable {}
extension VideoIDSDK.Permissions : Swift.RawRepresentable {}
extension VideoIDSDK.PermissionsStatus : Swift.Equatable {}
extension VideoIDSDK.PermissionsStatus : Swift.Hashable {}
extension VideoIDSDK.PermissionsStatus : Swift.RawRepresentable {}
extension VideoIDSDK.PACEMappingType : Swift.Equatable {}
extension VideoIDSDK.PACEMappingType : Swift.Hashable {}
extension VideoIDSDK.Phase : Swift.Equatable {}
extension VideoIDSDK.Phase : Swift.Hashable {}
extension VideoIDSDK.Phase : Swift.RawRepresentable {}
extension VideoIDSDK.FontType : Swift.Equatable {}
extension VideoIDSDK.FontType : Swift.Hashable {}
extension VideoIDSDK.FontType : Swift.RawRepresentable {}
